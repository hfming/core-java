2.File类
2.1.File类说明
	存储在变量,数组和对象中的数据是暂时的,当程序终止时他们就会丢失.为了能够永久的保存程序中创建的数据,需要将他们存储到硬盘或光盘的文件中.这些文件可以移动,传送,亦可以被其他程序使用.由于数据存储在文件中,所以我们需要学习一个和文件有密切关系的类,叫做File类,将要掌握获取文件的属性以及删除和重命名文件.最终如何向文件中写入数据和从文件中读取数据.那么File类关心的是在磁盘上文件的存储.File类描述的是一个文件或文件夹。（文件夹也可以称为目录）
	该类的出现是对文件系统的中的文件以及文件夹进行对象的封装。可以通过对象的思想来操作文件以及文件夹。可以用面向对象的处理问题，通过该对象的方法，可以得到文件或文件夹的信息方便了对文件与文件夹的属性信息进行操作。文件包含很多的信息:如文件名、创建修改时间、大小、可读可写属性等。
	IO流技术： 解决设备与设备之间的数据传输问题。 比如： 内存 -->硬盘 , 硬盘--> 内存 , 键盘--> 内存
	IO技术的应用场景：导出报表 ，上传大头照、 播放音频文件 、 切水果 、
	如果数据想永久性的保存起来，那么数据一般会保存在硬盘上，硬盘的数据一般以文件形式存在.
	sun也使用了一个类描述了文件与文件-->File
2.2.File类的构造函数
	File(String pathname) 指定文件或者文件夹的路径，创建一个File对象
	File(File parent, String child) 指定父路径与子路径构建一个File对象 。
	File(String parent, String child) 指定父路径与子路径构建一个File对象
	File(URI uri) 通过将给定的 file: URI转换为抽象路径名来创建新的 File实例。 
	File对象也可以表示不存在的文件。其实代表了一个抽象路径，构建一个File类的实例并不会在机器上创建一个文件.不管文件是否存在都可以创建任意文件名的File实例,可以调用 File实例的 exists方法判断文件或目录是否存在。
	创建 File 对象需要导包, import java.io.File
	File 对象没有无参数构造.创建对象需要传参.
	根据 API文档提示,传入一个文件的字符串路径. String path="c:/a.txt";(a.txt 文件在 c 盘下已经存在)
	File类的对象，既可以代表文件也可以代表文件夹。
2.3.目录分隔符
	路径就是文件或文件夹所在的位置。
	在Windows中分隔符为'\'， 在Unix/Linux中分隔符为'/'。
	注意：如果是使用"\"，则需要进行转义，写为"\\"才可以，如果是两个"\"，则写为"\\\\"。
	注意：在windows操作系统下, 可以使用"\" 与 "/" 作为目录分隔符 , 但是在Unix/Linux的操作系统下只能使用"/"作为目录分隔符。
	更专业的做法是使用File.separatorChar，这个值就会根据系统得到的相应的分割符。例：new File("c:"+File.separatorChar+"a.txt");
	路径：
		绝对路径： 指定文件的完整路径创建一个File对象，绝对路径一般以盘符开头。相对路径是指相对于某位置的路径，是指相对于当前目录。在执行Java程序时，相对路径为执行java命令时当前所在的目录
		相对路径： 资源文件相对于对当前路径。
	一般在使用时，建议用绝对路径，因为相对路径容易出问题，不好确定到底在什么地方
	. 代表是当前路径
	.. 代表是上一级路径
	注意： 如果当前路径与资源文件不是在同一个盘符下，没法写相对路径的。
2.4.File类方法
	boolean canExecute() 		:测试应用程序是否可以执行此抽象路径名表示的文件。  
	boolean canRead() 		:测试应用程序是否可以读取由此抽象路径名表示的文件。  
	boolean canWrite() 		:测试应用程序是否可以修改由此抽象路径名表示的文件。  
	int compareTo(File pathname) "比较两个抽象的路径名字典。  
	boolean createNewFile() 	:当且仅当具有该名称的文件尚不存在时，原子地创建一个由该抽象路径名命名的新的空文件。  
	static File createTempFile(String prefix, String suffix) :在默认临时文件目录中创建一个空文件，使用给定的前缀和后缀生成其名称。  
	static File createTempFile(String prefix, String suffix, File directory) :在指定的目录中创建一个新的空文件，使用给定的前缀和后缀字符串生成其名称。  
	boolean delete() 			:删除由此抽象路径名表示的文件或目录。  
	void deleteOnExit() 		:请求在虚拟机终止时删除由此抽象路径名表示的文件或目录。  
	boolean equals(Object obj) 	:测试此抽象路径名与给定对象的相等性。  
	boolean exists()    		:测试此抽象路径名表示的文件或目录是否存在。  
	File getAbsoluteFile() 		:返回此抽象路径名的绝对形式。  
	String getAbsolutePath()	:返回此抽象路径名的绝对路径名字符串。  
	File getCanonicalFile() 	:返回此抽象路径名的规范形式。  
	String getCanonicalPath()	 :返回此抽象路径名的规范路径名字符串。  
	long getFreeSpace() 		:返回分区未分配的字节数 named此抽象路径名。  
	String getName()   		:返回由此抽象路径名表示的文件或目录的名称。  
	String getParent() 		:返回此抽象路径名的父 null的路径名字符串，如果此路径名未命名为父目录，则返回null。  
	File getParentFile() 		:返回此抽象路径名的父，或抽象路径名 null如果此路径名没有指定父目录。  
	String getPath() 			:将此抽象路径名转换为路径名字符串。  
	long getTotalSpace() 		:通过此抽象路径名返回分区 named的大小。  
	long getUsableSpace() 		:返回上的分区提供给该虚拟机的字节数 named此抽象路径名。  
	int hashCode() 			:计算此抽象路径名的哈希码。  
	boolean isAbsolute() 		:测试这个抽象路径名是否是绝对的。  
	boolean isDirectory()		:测试此抽象路径名表示的文件是否为目录。  
	boolean isFile() 			:测试此抽象路径名表示的文件是否为普通文件。  
	boolean isHidden() 		:测试此抽象路径名命名的文件是否为隐藏文件。  
	long lastModified() 		:返回此抽象路径名表示的文件上次修改的时间。  
	long length() 			:返回由此抽象路径名表示的文件的长度。  
	String[] list() 			:返回一个字符串数组，命名由此抽象路径名表示的目录中的文件和目录。  
	String[] list(FilenameFilter filter) :返回一个字符串数组，命名由此抽象路径名表示的目录中满足指定过滤器的文件和目录。  
	File[] listFiles() 		:返回一个抽象路径名数组，表示由该抽象路径名表示的目录中的文件。  
	File[] listFiles(FileFilter filter) :返回一个抽象路径名数组，表示由此抽象路径名表示的满足指定过滤器的目录中的文件和目录。  
	File[] listFiles(FilenameFilter filter) :返回一个抽象路径名数组，表示由此抽象路径名表示的满足指定过滤器的目录中的文件和目录。  
	static File[] listRoots() :列出可用的文件系统根。  
	boolean mkdir() 			:创建由此抽象路径名命名的目录。  
	boolean mkdirs() 			:创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录。  
	boolean renameTo(File dest) 	:重命名由此抽象路径名表示的文件。  
	boolean setExecutable(boolean executable) :为此抽象路径名设置所有者的执行权限的便利方法。  
	boolean setExecutable(boolean executable, boolean ownerOnly) :设置该抽象路径名的所有者或每个人的执行权限。  
	boolean setLastModified(long time) :设置由此抽象路径名命名的文件或目录的最后修改时间。  
	boolean setReadable(boolean readable) :一种方便的方法来设置所有者对此抽象路径名的读取权限。  
	boolean setReadable(boolean readable, boolean ownerOnly) :设置此抽象路径名的所有者或每个人的读取权限。  
	boolean setReadOnly() 	:标记由此抽象路径名命名的文件或目录，以便只允许读取操作。  
	boolean setWritable(boolean writable) :一种方便的方法来设置所有者对此抽象路径名的写入权限。  
	boolean setWritable(boolean writable, boolean ownerOnly) :设置此抽象路径名的所有者或每个人的写入权限。  
	Path toPath() 			:返回从此抽象路径构造的java.nio.file.Path对象。  
	String toString() 		:返回此抽象路径名的路径名字符串。  
	URI toURI() 			:构造一个表示此抽象路径名的 file: URI。  
	URL toURL() 已弃用 		:此方法不会自动转义URL中非法的字符。 建议在新的代码转换的抽象路径到URL通过先转换成URI，经由toURI方法，然后经由转换URI为URL URI.toURL方法。  
