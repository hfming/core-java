2.IOException处理
	所有的异常都只是进行了抛出处理，这样是不合理的。所以上述代码并不完善,因为异常没有处理。
	当我们打开流,读和写,关闭流的时候都会出现异常,异常出现后,后面的代码都不会执行了。假设打开和关闭流出现了异常，那么显然close方法就不会再执行。那么会对程序有什么影响？
	在执行该程序的同时我们尝试去删除 b.txt文件。如果在该程序没有睡醒的话，我们是无法删除 b.txt文件的。因为 b.txt还被该程序占用着，这是很严重的问题，所以一定要关闭流。
	目前我们是抛出处理，一旦出现了异常，close就没有执行，也就没有释放资源。那么为了保证close的执行该如何处理呢。那么就需要使用try{} catch(){}finally{}语句。try中放入可能出现异常的语句，catch是捕获异常对象，fianlly是一定要执行的代码。
	在最后的 close代码中可能会有问题，两个 close，如果第一个 close方法出现了异常，并抛出了运行时异常，那么程序还是停止了。下面的 close方法就没有执行到。那么为了保证 close的执行，将第二个放到 fianlly中即可。
